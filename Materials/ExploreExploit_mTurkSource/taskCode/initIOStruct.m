function ioStruct = initIOStruct(taskStruct, stimDir)
    % hide input to prevent participant from over-writing into the script
    HideCursor(); ListenChar(2);
    
    % set up the screen
    ioStruct = struct();
    ioStruct.bgColor = [60 60 60];
    ioStruct.textColor = [200 200 200];
    debugWinSize = [0,0,800,600];
    fullWinSize = [];
    % run full-screen task
    [ioStruct.wPtr, ioStruct.wPtrRect] = Screen('OpenWindow', 0, ioStruct.bgColor, fullWinSize);
    % Measure the vertical refresh rate of the monitor
    ioStruct.centerX = round(ioStruct.wPtrRect(3)/2);
    ioStruct.centerY = round(ioStruct.wPtrRect(4)/2);
    
    % show loading prompt
    Screen('TextFont', ioStruct.wPtr, 'Courier');
    % show the loading screen
    Screen('TextSize', ioStruct.wPtr, 45);
    Screen('TextColor', ioStruct.wPtr, ioStruct.textColor);
    DrawFormattedText(ioStruct.wPtr, 'Loading...', 'center', 'center', [], 70, false, false, 1.1);
    Screen(ioStruct.wPtr, 'Flip');
    
    % stimulus durations
    ioStruct.SLOW = -1;
    ioStruct.MAX_RT = 3;
    ioStruct.FIX_DURATION = 0.75;
    ioStruct.REW_DURATION = 1.5;
    ioStruct.BLOCK_START_WAIT = 3;
    ioStruct.BLOCK_END_WAIT = 4;
    
    % response keys
    ioStruct.LEFT = 1;
    ioStruct.RIGHT = 2;
    ioStruct.respKey_1 = [ KbName('F'), KbName('1!') ];
    ioStruct.respKeyName_1 = '1';
    ioStruct.respKey_2 = [ KbName('J'), KbName('4$') ];
    ioStruct.respKeyName_2 = '2';
    
    % scanner keys
    ioStruct.respMRIPulse = [ KbName('5%'), KbName('5')];
    
    % task control keys
    ioStruct.respKey_Quit = KbName('Q');
    ioStruct.respKeyName_Quit = 'Q';
    ioStruct.respKey_Proceed = KbName('P');
    ioStruct.respKeyName_Proceed = 'P';
    
    %%%%%%%%%%%%%%%%%%%%%
    % slot machine rectangles
    ioStruct.rectMachine = nan(2,4);
    imageScaleFactor = 1;
    % width of the machine minus the handle (for centering purposes)
    machineWidth = 250*imageScaleFactor;
    % size of the machine's full image
    machineImageWidth = 325*imageScaleFactor; 
    machineImageHeight = 400*imageScaleFactor;
    machineGap = 100;
    machineRect = [0, 0, machineImageWidth, machineImageHeight];
    % left machine
    leftX = ioStruct.centerX - machineImageWidth - (machineGap/2);
    topY = ioStruct.centerY - (machineImageHeight/2);
    ioStruct.rectMachine(1,:) = machineRect + [leftX, topY, leftX, topY];
    % right machine
    leftX = ioStruct.centerX + (machineGap/2);
    topY = ioStruct.centerY - (machineImageHeight/2);
    ioStruct.rectMachine(2,:) = machineRect + [leftX, topY, leftX, topY];
    
    % reward feedback rect
    ioStruct.rectOutcome = nan(2,4);
    rewardHMargin = 15;
    rewardWidth = machineWidth - 2*rewardHMargin;
    rewardHeight = machineImageHeight * 0.15;
    rectReward = [0 0 rewardWidth rewardHeight];
    % place left-most outcome
    leftX = ioStruct.rectMachine(1,1) + rewardHMargin;
    topY = ioStruct.rectMachine(1,2) + rewardHMargin;
    ioStruct.rectOutcome(1,:) = rectReward + [leftX, topY, leftX, topY];
    % right-most outcome
    leftX = ioStruct.rectMachine(2,1) + rewardHMargin;
    topY = ioStruct.rectMachine(2,2) + rewardHMargin;
    ioStruct.rectOutcome(2,:) = rectReward + [leftX, topY, leftX, topY];
    
    % token rects
    ioStruct.rectToken = nan(2,4);
    width = rewardHeight; height = rewardHeight;
    rectToken = [0 0 width height];
    % left token
    leftX = ioStruct.rectOutcome(1,1) + round( (ioStruct.rectOutcome(1,3) - ioStruct.rectOutcome(1,1)) / 2 ) - round(width/2);
    topY = ioStruct.rectOutcome(1,2) + round( (ioStruct.rectOutcome(1,4) - ioStruct.rectOutcome(1,2)) / 2 ) - round(height/2);
    ioStruct.rectToken(1,:) = rectToken + [leftX, topY, leftX, topY];
    % right token
    leftX = ioStruct.rectOutcome(2,1) + round( (ioStruct.rectOutcome(2,3) - ioStruct.rectOutcome(2,1)) / 2 ) - round(width/2);
    topY = ioStruct.rectOutcome(2,2) + round( (ioStruct.rectOutcome(2,4) - ioStruct.rectOutcome(2,2)) / 2 ) - round(height/2);
    ioStruct.rectToken(2,:) = rectToken + [leftX, topY, leftX, topY];
    
    % slot machine image rects
    imageHMargin = 20;
    % fill the rest of the remaining space with the image
    leftX = ioStruct.rectMachine(1,1)+imageHMargin;
    rightX = ioStruct.rectMachine(1,1)+machineWidth-imageHMargin;
    topY = ioStruct.rectOutcome(1,4)+imageHMargin;
    bottomY = ioStruct.rectMachine(1,4) - imageHMargin;
    ioStruct.rectImage(1,:) = [leftX, topY, rightX, bottomY];
    % do the same for the right image
    leftX = ioStruct.rectMachine(2,1)+imageHMargin;
    rightX = ioStruct.rectMachine(2,1)+machineWidth-imageHMargin;
    topY = ioStruct.rectOutcome(2,4)+imageHMargin;
    bottomY = ioStruct.rectMachine(2,4) - imageHMargin;
    ioStruct.rectImage(2,:) = [leftX, topY, rightX, bottomY];
    
    % slot machine images to load
    ioStruct.stims = nan(1, taskStruct.numStims);
    % randomply sample number of required images
    ioStruct.allImageFiles = dir(fullfile(stimDir, 'stimuli', '*.bmp'));
    ioStruct.allImageFiles = ioStruct.allImageFiles( randsample(length(ioStruct.allImageFiles), taskStruct.numStims) );
    % append in path information
    [ioStruct.allImageFiles(:).folder] = deal(fullfile(stimDir, 'stimuli'));
    % load images into memory
    for sI = 1 : taskStruct.numStims
        ioStruct.stims(sI) = Screen('MakeTexture', ioStruct.wPtr, imread(fullfile(ioStruct.allImageFiles(sI).folder, ioStruct.allImageFiles(sI).name)));
    end
    
    % casinos
    ioStruct.casinoStim = nan(1, length(unique(taskStruct.allTrials.blockID)));
    allCasinoNameFiles = dir(fullfile(stimDir, 'casinos', 'casino_*.png'));
    allCasinoNameFiles = allCasinoNameFiles(randperm(length(allCasinoNameFiles)));
    % append in path information
    [allCasinoNameFiles(:).folder] = deal(fullfile(stimDir, 'casinos'));
    % load images into memory
    for sI = 1 : length(ioStruct.casinoStim)
        ioStruct.casinoStim(sI) = Screen('MakeTexture', ioStruct.wPtr, imread(fullfile(allCasinoNameFiles(sI).folder, allCasinoNameFiles(sI).name)));
    end
    
    % casino image rect
    width = 400; height = 200;
    leftX = ioStruct.centerX - (width/2);
    topY = ioStruct.centerY - (height/2);
    ioStruct.casinoRect = [leftX, topY, leftX+width, topY+height];
    
    % slot machine images
    ioStruct.machine = Screen('MakeTexture', ioStruct.wPtr, imread(fullfile('images', 'slotMachine.png')));
    ioStruct.machineSelected = Screen('MakeTexture', ioStruct.wPtr, imread(fullfile('images', 'slotMachine_selected.png')));
    % token images
    ioStruct.tokenWin = Screen('MakeTexture', ioStruct.wPtr, imread(fullfile('images', 'token_Win.png')));
    ioStruct.tokenLoss = Screen('MakeTexture', ioStruct.wPtr, imread(fullfile('images', 'token_Loss.png')));
    
    % show loading completed prompt
    WaitSecs(2);
    Screen('TextFont', ioStruct.wPtr, 'Courier');
    % show the loading screen
    Screen('TextSize', ioStruct.wPtr, 45);
    Screen('TextColor', ioStruct.wPtr, ioStruct.textColor);
    DrawFormattedText(ioStruct.wPtr, 'Loading Completed', 'center', 'center', [], 70, false, false, 1.1);
    Screen(ioStruct.wPtr, 'Flip');
end