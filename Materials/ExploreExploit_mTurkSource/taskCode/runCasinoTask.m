%% Initialization 
clear all;

% some initial global setup
RandStream.setGlobalStream(RandStream('mt19937ar','Seed','shuffle'));
RestrictKeysForKbCheck( [] );
Screen('Preference', 'SkipSyncTests', 1);
KbName('UnifyKeyNames');

% initialize the task strcuture
numSessions = 4;
numBlocks = 20;
numTrialsPerBlock = zeros(numBlocks, 1) + 15;
taskStruct = initTaskStruct(numSessions, numBlocks, numTrialsPerBlock);
taskStruct.sessionBlocks{1} = 1:5;
taskStruct.sessionBlocks{2} = 6:10;
taskStruct.sessionBlocks{3} = 11:15;
taskStruct.sessionBlocks{4} = 16:20;

% subejct ID info
taskStruct.subID = input('Participant number :\n','s');
% output folder
taskStruct.outputFolder = fullfile('..', 'data');
% check to see if the output folder exists
if exist(taskStruct.outputFolder, 'dir') == 0
    % folder does not exist - create it
    mkdir( taskStruct.outputFolder );
end
taskStruct.fileName = [taskStruct.subID '_Sub_ExpExpTask_eCog_' datestr(now, 'mm-dd-yyyy_HH-MM-SS')];

% initialize the IO for the task
ioStruct = initIOStruct(taskStruct, fullfile('.', 'images', 'task'));

% wait for experimentor input to prompt wait for scanner pulse
Screen(ioStruct.wPtr, 'Flip');
% show inter-block information
Screen('TextSize', ioStruct.wPtr, 30); Screen('TextColor', ioStruct.wPtr, [255 255 255]); Screen('TextFont', ioStruct.wPtr, 'Helvetica');
DrawFormattedText(ioStruct.wPtr, 'Waiting for technician to mark functional-ready status.', 'center', 'center');
% show prompt
Screen(ioStruct.wPtr, 'Flip');
RestrictKeysForKbCheck( [ioStruct.respKey_Quit, ioStruct.respKey_Proceed] );
[~, keyCode] = KbWait(-3,2);
% check to see if we proceed or quit
if find(keyCode) == ioStruct.respKey_Quit
    % end the task and clean up
    sca; ShowCursor(); ListenChar();
    return;
end


%%%%%%%%%%%%%%%%%%%%%% 
%% run sessions

% loop through each session and run all blocks within it before propting for an inter-session break
for sessionID = 1 : numSessions
    % specify trials to run in session 1
    isSessionBlock = ismember(taskStruct.allTrials.blockID, taskStruct.sessionBlocks{sessionID});
    % label block's session IDs, and extract index of trials to run
    taskStruct.allTrials.sessionID( isSessionBlock ) = sessionID;
    sessionTrials = find( isSessionBlock );
    
    % wait for scanner pulse and capture the event time
    taskStruct.tSessionStart(sessionID) = GetSecs();
    % run the session
    taskStruct = runCasinoSession(taskStruct, ioStruct, sessionTrials);
    % track session duration
    taskStruct.tSessionEnd(sessionID) = GetSecs();
    % save data
    save(fullfile(taskStruct.outputFolder, taskStruct.fileName), 'ioStruct', 'taskStruct');
    
    % check to see if there are more sessions, if so run the break
    if sessionID < numSessions
        % clear screen
        Screen(ioStruct.wPtr, 'Flip');
        % show inter-block information
        Screen('TextSize', ioStruct.wPtr, 30); Screen('TextColor', ioStruct.wPtr, [255 255 255]); Screen('TextFont', ioStruct.wPtr, 'Helvetica');
        DrawFormattedText(ioStruct.wPtr, 'Time for a short break.\n\nWaiting for technician to mark functional-ready status.', 'center', 'center');
        % show prompt
        Screen(ioStruct.wPtr, 'Flip');
        % wait for quit or proceed input from experimenter before moving to the next session
        RestrictKeysForKbCheck( [ioStruct.respKey_Quit, ioStruct.respKey_Proceed] );
        [~, keyCode] = KbWait(-3,2);
        % check to see if we proceed or quit
        if find(keyCode) == ioStruct.respKey_Quit
            % end the task and clean up
            sca; ShowCursor(); ListenChar();
            return;
        end
        
    end
end

% prompt task completion
Screen(ioStruct.wPtr, 'Flip');
Screen('TextSize', ioStruct.wPtr, 30); Screen('TextColor', ioStruct.wPtr, [255 255 255]); Screen('TextFont', ioStruct.wPtr, 'Helvetica');
DrawFormattedText(ioStruct.wPtr, 'And we''re done!.\n\n Someone will be with you in a few moments.', 'center', 'center');
% show feedback for prescribed time, then clear screen
Screen(ioStruct.wPtr, 'Flip');
RestrictKeysForKbCheck( ioStruct.respKey_Proceed );
KbWait(-3,2);
% end the task and clean up
sca; ShowCursor(); ListenChar();
